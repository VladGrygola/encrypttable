{"version":3,"sources":["App.js","index.js"],"names":["Object","defineProperty","Array","prototype","value","chunkSize","temporal","i","this","length","push","slice","App","grid","useState","columns","setColumns","encryptedGrid","setEncryptedGrid","transpose","matrix","reduce","$","row","map","_","joinGrid","rows","forEach","array","join","className","type","onChange","e","parseInt","target","split","chunk","Math","ceil","some","c","style","fontSize","char","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAIAA,OAAOC,eAAeC,MAAMC,UAAW,QAAS,CAC9CC,MAAO,SAAUC,GAGf,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAIC,KAAKC,OAAQF,GAAKF,EACpCC,EAASI,KAAKF,KAAKG,MAAMJ,EAAGA,EAAIF,IAGlC,OAAOC,KAgGIM,MA5Ff,WAAgB,IAOeC,EAPhB,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAE6BF,mBAAS,CAAC,KAFvC,mBAENG,EAFM,KAESC,EAFT,KAIPC,EAAY,SAACC,GAAD,OAChBA,EAAOC,QAAO,SAACC,EAAGC,GAAJ,OAAYA,EAAIC,KAAI,SAACC,EAAGlB,GAAJ,4BAAee,EAAEf,IAAM,IAAvB,CAA4BgB,EAAIhB,UAAM,KAOpEmB,EAAW,SAACb,GAChB,IAAMc,EAAO,GAEb,OADAd,EAAKe,SAAQ,SAACC,GAAD,OAAWF,EAAKjB,KAAKmB,EAAMC,KAAK,QACtCH,EAAKG,KAAK,KAqBnB,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKA,UAAU,SACb,yIACA,2BACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOlB,EAAWmB,SAASD,EAAEE,OAAOhC,QAAUW,IACxDX,MAAOW,KAGX,yBAAKgB,UAAU,SACb,6LACA,2BACEC,KAAK,OACLC,SAjCiB,SAAC,GAA2B,IAC/CJ,EAD8C,EAAxBO,OAAUhC,MAClBiC,MAAM,IAAIC,MAAMvB,GACpC,GAAIc,GAASA,EAAM,GACjB,KAAOA,EAAMA,EAAMpB,OAAS,GAAGA,OAASM,GACtCc,EAAMA,EAAMpB,OAAS,GAAGC,KAAK,IAEjCQ,EAAiBW,IA4BTzB,MAAOsB,EAAST,MAGpB,yBAAKc,UAAU,SACb,yIACA,2BACEC,KAAK,OACLC,SAhCiB,SAAC,GAA2B,IAAf7B,EAAc,EAAxBgC,OAAUhC,MAChCyB,EAAQzB,EAAMiC,MAAM,IAAIC,MAAMC,KAAKC,KAAKpC,EAAMK,OAASM,IAC7D,GAAIc,GAASA,EAAM,GACjB,KAAOA,EAAMA,EAAMpB,OAAS,GAAGA,OAAS8B,KAAKC,KAAKpC,EAAMK,OAASM,IAC/Dc,EAAMA,EAAMpB,OAAS,GAAGC,KAAK,IAEjCQ,EAAiBC,EAAUU,KA2BnBzB,OArDmBS,EAqDQI,EApD5BS,EAASP,EAAUN,SAwDvBI,EAAcwB,MAAK,SAACP,GAAD,OAAOA,EAAEO,MAAK,SAACC,GAAD,MAAa,KAANA,QACvC,6BACE,uBAAGC,MAAO,CAAEC,SAAU,WAAtB,2NAIA,KACH3B,EAAcR,OAAS,EAAI,KAC1B,6BACE,uBAAGkC,MAAO,CAAEC,SAAU,WAAtB,oKACkC7B,EAAU,EAD5C,sDAMJ,+BACGE,EAAcO,KAAI,SAACD,GAAD,OACjB,4BACGA,EAAIC,KAAI,SAACqB,GAAD,OACP,4BAAKA,aC9FnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.3ac3833f.chunk.js","sourcesContent":["/* eslint-disable no-extend-native */\nimport React, { useState } from 'react';\nimport './App.scss';\n\nObject.defineProperty(Array.prototype, 'chunk', {\n  value: function (chunkSize) {\n    var temporal = [];\n\n    for (var i = 0; i < this.length; i += chunkSize) {\n      temporal.push(this.slice(i, i + chunkSize));\n    }\n\n    return temporal;\n  },\n});\n\nfunction App() {\n  const [columns, setColumns] = useState(4);\n  const [encryptedGrid, setEncryptedGrid] = useState([[]]);\n\n  const transpose = (matrix) =>\n    matrix.reduce(($, row) => row.map((_, i) => [...($[i] || []), row[i]]), []);\n\n  const encryptGridToString = (grid) => {\n    return joinGrid(transpose(grid));\n  };\n\n  // JOIN TABLE TO STRING\n  const joinGrid = (grid) => {\n    const rows = [];\n    grid.forEach((array) => rows.push(array.join('')));\n    return rows.join('');\n  };\n\n  const handleDecryptInput = ({ target: { value } }) => {\n    const array = value.split('').chunk(columns);\n    if (array && array[0]) {\n      while (array[array.length - 1].length < columns)\n        array[array.length - 1].push('');\n    }\n    setEncryptedGrid(array);\n  };\n\n  const handleEncryptInput = ({ target: { value } }) => {\n    const array = value.split('').chunk(Math.ceil(value.length / columns));\n    if (array && array[0]) {\n      while (array[array.length - 1].length < Math.ceil(value.length / columns))\n        array[array.length - 1].push('');\n    }\n    setEncryptedGrid(transpose(array));\n  };\n\n  return (\n    <div className='App'>\n      <div>\n        <div className='input'>\n          <span>Кількість стовпців</span>\n          <input\n            type='text'\n            onChange={(e) => setColumns(parseInt(e.target.value) || columns)}\n            value={columns}\n          />\n        </div>\n        <div className='input'>\n          <span>Відкрий || Розшифрований текст</span>\n          <input\n            type='text'\n            onChange={handleDecryptInput}\n            value={joinGrid(encryptedGrid)}\n          />\n        </div>\n        <div className='input'>\n          <span>Зашифрований текст</span>\n          <input\n            type='text'\n            onChange={handleEncryptInput}\n            value={encryptGridToString(encryptedGrid)}\n          />\n        </div>\n      </div>\n      {encryptedGrid.some((e) => e.some((c) => c === '')) ? (\n        <div>\n          <i style={{ fontSize: '0.60em' }}>\n            Переконайтесь що усі клітинки заповнені\n          </i>\n        </div>\n      ) : null}\n      {encryptedGrid.length > 1 ? null : (\n        <div>\n          <i style={{ fontSize: '0.60em' }}>\n            Текст повинет містити не менше {columns + 1} символів\n          </i>\n        </div>\n      )}\n\n      <table>\n        {encryptedGrid.map((row) => (\n          <th>\n            {row.map((char) => (\n              <td>{char}</td>\n            ))}\n          </th>\n        ))}\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}