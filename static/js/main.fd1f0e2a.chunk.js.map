{"version":3,"sources":["App.js","index.js"],"names":["Object","defineProperty","Array","prototype","value","chunkSize","temporal","i","this","length","push","slice","transpose","matrix","reduce","$","row","map","_","joinGrid","grid","rows","forEach","array","join","App","useState","columns","setColumns","textGrid","setTextGrid","className","type","onChange","e","parseInt","target","split","chunk","Math","ceil","some","c","char","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAMAA,OAAOC,eAAeC,MAAMC,UAAW,QAAS,CAC9CC,MAAO,SAAUC,GAGf,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAIC,KAAKC,OAAQF,GAAKF,EACpCC,EAASI,KAAKF,KAAKG,MAAMJ,EAAGA,EAAIF,IAGlC,OAAOC,KAQX,IAAMM,EAAY,SAACC,GAAD,OAChBA,EAAOC,QAAO,SAACC,EAAGC,GAAJ,OAAYA,EAAIC,KAAI,SAACC,EAAGX,GAAJ,4BAAeQ,EAAER,IAAM,IAAvB,CAA4BS,EAAIT,UAAM,KAIpEY,EAAW,SAACC,GAChB,IAAMC,EAAO,GAEb,OADAD,EAAKE,SAAQ,SAACC,GAAD,OAAWF,EAAKX,KAAKa,EAAMC,KAAK,QACtCH,EAAKG,KAAK,KAuGJC,MApGf,WAAe,IASgBL,EAThB,EAEiBM,mBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,OAMmBF,mBAAS,CAAC,IAAIxB,MAAMyB,KANvC,mBAMNE,EANM,KAMIC,EANJ,KAsCb,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKA,UAAU,SACb,yIACA,2BACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAON,EAAWO,SAASD,EAAEE,OAAOhC,QAAUuB,IACxDvB,MAAOuB,KAGX,yBAAKI,UAAU,SACb,+IACA,2BACEC,KAAK,OACLC,SArCiB,SAAC,GAA2B,IAC/CV,EAD8C,EAAxBa,OAAUhC,MAClBiC,MAAM,IAAIC,MAAMX,GACpC,GAAIJ,GAASA,EAAM,GACjB,KAAOA,EAAMA,EAAMd,OAAS,GAAGA,OAASkB,GACtCJ,EAAMA,EAAMd,OAAS,GAAGC,KAAK,IAEjCoB,EAAYP,IAgCJnB,MAAOe,EAASU,MAGpB,yBAAKE,UAAU,SACb,yIACA,2BACEC,KAAK,OACLC,SAhCiB,SAAC,GAA2B,IAAf7B,EAAc,EAAxBgC,OAAUhC,MAChCmB,EAAQnB,EAAMiC,MAAM,IAAIC,MAAMC,KAAKC,KAAKpC,EAAMK,OAASkB,IAC7D,GAAIJ,GAASA,EAAM,GACjB,KAAOA,EAAMA,EAAMd,OAAS,GAAGA,OAAS8B,KAAKC,KAAKpC,EAAMK,OAASkB,IAC/DJ,EAAMA,EAAMd,OAAS,GAAGC,KAAK,IAEjCoB,EAAYlB,EAAUW,KA2BdnB,OArDmBgB,EAqDQS,EApD5BV,EAASP,EAAUQ,SAwDvBS,EAASY,MAAK,SAACP,GAAD,OAAOA,EAAEO,MAAK,SAACC,GAAD,MAAa,KAANA,QAClC,6BACE,qPACA,sCAEA,KACHb,EAASY,MAAK,SAACP,GAAD,OAAOA,EAAEzB,SAAWkB,KACjC,6BACE,mZAGA,sCAEA,KACHE,EAASpB,OAAS,EAAI,KACrB,6BACE,+LAAmCkB,EAAU,EAA7C,qDACA,sCAIJ,+BACGE,EAASZ,KAAI,SAACD,GAAD,OACZ,4BACGA,EAAIC,KAAI,SAAC0B,GAAD,OACP,4BAAKA,aCvHnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.fd1f0e2a.chunk.js","sourcesContent":["/* eslint-disable no-extend-native */\r\nimport React, { useState } from 'react';\r\nimport './App.scss';\r\n\r\n// Із масиву повертає масив масивів з певною кількісю елементів\r\n// Наприклад [1, 2, 3, 4, 5, 6, 7, 8, 9].chunk(3) = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nObject.defineProperty(Array.prototype, 'chunk', {\r\n  value: function (chunkSize) {\r\n    var temporal = [];\r\n\r\n    for (var i = 0; i < this.length; i += chunkSize) {\r\n      temporal.push(this.slice(i, i + chunkSize));\r\n    }\r\n\r\n    return temporal;\r\n  },\r\n});\r\n\r\n// Приймає масив масивів (матрицю) та свапає вісь х та у\r\n// Наприклад, transpone(  [[1, 2, 3],          [[1, 4, 7],\r\n//                         [4, 5, 6],     =     [2, 5, 8],\r\n//                         [7, 8, 9]] )         [3, 6, 9]]\r\nconst transpose = (matrix) =>\r\n  matrix.reduce(($, row) => row.map((_, i) => [...($[i] || []), row[i]]), []);\r\n\r\n// Приймає масив масивів та поєдує усі елементи у стрічку\r\n// Наприклад joinGrid( [['м', 'а', 'с'], ['и', 'в']] ) = 'масив'\r\nconst joinGrid = (grid) => {\r\n  const rows = [];\r\n  grid.forEach((array) => rows.push(array.join('')));\r\n  return rows.join('');\r\n};\r\n\r\nfunction App() {\r\n  // Кількість стовпців (по дефолту 4)\r\n  const [columns, setColumns] = useState(4);\r\n\r\n  // Таблиця яка зберігає сивмоли тексту, масив масивів. Ширина таблиці (довжина рядків) задається кількісю стовпців\r\n  // Якщо з'єднати усі символи через joinGrid(), можна отримати вихідний розшифрований текст\r\n  const [textGrid, setTextGrid] = useState([new Array(columns)]);\r\n\r\n  // Приймає таблицю символів тексту, повертає зашифрований текст\r\n  const encryptGridToString = (grid) => {\r\n    return joinGrid(transpose(grid));\r\n  };\r\n\r\n  // Зашифровує текст\r\n  // Встановлює textGrid як масив масивів з шириною columns при вводі тексту\r\n  // Якщо символів не достатньо для повної таблиці, встановлює на недостаючі місця пусту стрічку\r\n  const handleDecryptInput = ({ target: { value } }) => {\r\n    const array = value.split('').chunk(columns);\r\n    if (array && array[0]) {\r\n      while (array[array.length - 1].length < columns)\r\n        array[array.length - 1].push('');\r\n    }\r\n    setTextGrid(array);\r\n  };\r\n\r\n  // Розшифровує текст\r\n  // !Працює тільки з правельними вхідними даними, усі клітинки мали бути заповненими при створенні зашифрованого тексту!\r\n  // Розраховує необхідну кількість рядків і створює масив масивів\r\n  // Свапає х та у через transpose і результат записує в textGrid (тобто в таблицю з розшифрованим текстом)\r\n  const handleEncryptInput = ({ target: { value } }) => {\r\n    const array = value.split('').chunk(Math.ceil(value.length / columns));\r\n    if (array && array[0]) {\r\n      while (array[array.length - 1].length < Math.ceil(value.length / columns))\r\n        array[array.length - 1].push('');\r\n    }\r\n    setTextGrid(transpose(array));\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div>\r\n        <div className='input'>\r\n          <span>Кількість стовпців</span>\r\n          <input\r\n            type='text'\r\n            onChange={(e) => setColumns(parseInt(e.target.value) || columns)}\r\n            value={columns}\r\n          />\r\n        </div>\r\n        <div className='input'>\r\n          <span>Розшифрований текст</span>\r\n          <input\r\n            type='text'\r\n            onChange={handleDecryptInput}\r\n            value={joinGrid(textGrid)}\r\n          />\r\n        </div>\r\n        <div className='input'>\r\n          <span>Зашифрований текст</span>\r\n          <input\r\n            type='text'\r\n            onChange={handleEncryptInput}\r\n            value={encryptGridToString(textGrid)}\r\n          />\r\n        </div>\r\n      </div>\r\n      {textGrid.some((e) => e.some((c) => c === '')) ? (\r\n        <div>\r\n          <i>Переконайтесь що усі клітинки заповнені</i>\r\n          <div>&nbsp;</div>\r\n        </div>\r\n      ) : null}\r\n      {textGrid.some((e) => e.length !== columns) ? (\r\n        <div>\r\n          <i>\r\n            Переконайтесь кількість стовпців дорівнює кількість зазначених вище\r\n          </i>\r\n          <div>&nbsp;</div>\r\n        </div>\r\n      ) : null}\r\n      {textGrid.length > 1 ? null : (\r\n        <div>\r\n          <i>Текст повинет містити не менше {columns + 1} символів</i>\r\n          <div>&nbsp;</div>\r\n        </div>\r\n      )}\r\n\r\n      <table>\r\n        {textGrid.map((row) => (\r\n          <th>\r\n            {row.map((char) => (\r\n              <td>{char}</td>\r\n            ))}\r\n          </th>\r\n        ))}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}